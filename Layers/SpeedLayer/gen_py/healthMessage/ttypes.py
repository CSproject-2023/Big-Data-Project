#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class RamData(object):
    """
    Attributes:
     - Total
     - Free

    """


    def __init__(self, Total=None, Free=None,):
        self.Total = Total
        self.Free = Free

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.Total = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.Free = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RamData')
        if self.Total is not None:
            oprot.writeFieldBegin('Total', TType.DOUBLE, 1)
            oprot.writeDouble(self.Total)
            oprot.writeFieldEnd()
        if self.Free is not None:
            oprot.writeFieldBegin('Free', TType.DOUBLE, 2)
            oprot.writeDouble(self.Free)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DiskData(object):
    """
    Attributes:
     - Total
     - Free

    """


    def __init__(self, Total=None, Free=None,):
        self.Total = Total
        self.Free = Free

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.Total = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.Free = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DiskData')
        if self.Total is not None:
            oprot.writeFieldBegin('Total', TType.DOUBLE, 1)
            oprot.writeDouble(self.Total)
            oprot.writeFieldEnd()
        if self.Free is not None:
            oprot.writeFieldBegin('Free', TType.DOUBLE, 2)
            oprot.writeDouble(self.Free)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Message(object):
    """
    Attributes:
     - serviceName
     - Timestamp
     - CPU
     - RAM
     - Disk

    """


    def __init__(self, serviceName=None, Timestamp=None, CPU=None, RAM=None, Disk=None,):
        self.serviceName = serviceName
        self.Timestamp = Timestamp
        self.CPU = CPU
        self.RAM = RAM
        self.Disk = Disk

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Timestamp = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.CPU = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.RAM = RamData()
                    self.RAM.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.Disk = DiskData()
                    self.Disk.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Message')
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 1)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.Timestamp is not None:
            oprot.writeFieldBegin('Timestamp', TType.STRING, 2)
            oprot.writeString(self.Timestamp.encode('utf-8') if sys.version_info[0] == 2 else self.Timestamp)
            oprot.writeFieldEnd()
        if self.CPU is not None:
            oprot.writeFieldBegin('CPU', TType.DOUBLE, 3)
            oprot.writeDouble(self.CPU)
            oprot.writeFieldEnd()
        if self.RAM is not None:
            oprot.writeFieldBegin('RAM', TType.STRUCT, 4)
            self.RAM.write(oprot)
            oprot.writeFieldEnd()
        if self.Disk is not None:
            oprot.writeFieldBegin('Disk', TType.STRUCT, 5)
            self.Disk.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RamData)
RamData.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'Total', None, None, ),  # 1
    (2, TType.DOUBLE, 'Free', None, None, ),  # 2
)
all_structs.append(DiskData)
DiskData.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'Total', None, None, ),  # 1
    (2, TType.DOUBLE, 'Free', None, None, ),  # 2
)
all_structs.append(Message)
Message.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'serviceName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Timestamp', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'CPU', None, None, ),  # 3
    (4, TType.STRUCT, 'RAM', [RamData, None], None, ),  # 4
    (5, TType.STRUCT, 'Disk', [DiskData, None], None, ),  # 5
)
fix_spec(all_structs)
del all_structs
